






data science {
data engenieur             = collecte + netoyage 
data analyst               = netoyage + exploration des donn√©es 
machine learning ingenieur = construction du model +  deploiement du model 
} 

----------------------------------------------------------------------------------
# columns for detailed visualisation
cols=['baseline value', 'accelerations', 'fetal_movement',
       'uterine_contractions', 'light_decelerations', 'severe_decelerations',
       'prolongued_decelerations', 'abnormal_short_term_variability',
       'mean_value_of_short_term_variability',
       'percentage_of_time_with_abnormal_long_term_variability',
       'mean_value_of_long_term_variability']
for i in cols:
    sns.stripplot(x=data["fetal_health"], y=data[i], color="black", alpha=0.5 )
    sns.boxenplot(x=data["fetal_health"], y=data[i], palette=colours)
    plt.show()
-----------------------------------------------------------------------------------
shades =["#f7b2b0","#c98ea6","#8f7198","#50587f", "#003f5c"]
plt.figure(figsize=(20,10))
sns.boxenplot(data = data,palette = shades)
plt.xticks(rotation=90)
plt.show()
-----------------------------------------------------------------------------------
modeling
----------------------------------------------------------------------------------------------		
	# pip install scikit-plot
	import scikitplot as skplt
	skplt.metrics.plot_confusion_matrix(y_test,y_pred,normalize=False)


    from sklearn import metrics
	print('MAE:', metrics.mean_absolute_error(y_test, predictions))
	print('MSE:', metrics.mean_squared_error(y_test, predictions))
	print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))
----------------------------------------

#index label
xy=[0,15]
df.loc[xy]
#index position acept -1 -2
#df.iloc[[0,15,-1]]
df.iloc[0:15,-5]

#subset rows and columns form
	subset=df.loc[1:10,['Pregnancies','Glucose']]

# filtring columns
	# df.loc[df['BloodPressure']==50] simple form 
	df.loc[(df['Pregnancies']==0) & (df['Age']==26)]

#general form 
#df.groupby(['Age']).mean()/count/sum
df.groupby(['Age'])['Pregnancies'].count()
# groupby multiple variable   a revoir plus en detail
---------------------------------------------------------------------------------------